
using System.Text.RegularExpressions;

namespace PhotoLibraryBackend.MediaReader;

/// <inheritdoc />
public class MediaMetadataService : IMediaMetadataService
{
    const string TempFolder = "VideoThumbnailsTemp";
    private readonly string _tempFolderPath;

    private readonly ILogger<MediaMetadataService> _logger;

    public MediaMetadataService(ILogger<MediaMetadataService> logger)
    {
        _tempFolderPath = Path.Combine(Directory.GetCurrentDirectory(), TempFolder);
        if (!Directory.Exists(_tempFolderPath))
        {
            Directory.CreateDirectory(_tempFolderPath);
        }
        _logger = logger;
    }

    /// <inheritdoc />
    public byte[]? MakePhotoThumbnail(string filePath)
    {
        return filePath.MakePhotoThumbnail();
    }

    /// <inheritdoc />
    public async Task<byte[]?> MakeVideoThumbnail(string filePath)
    {
        var fileNameWithoutExt = Path.GetFileNameWithoutExtension(filePath);
        var videoThumbnailFilePath = Path.Combine(_tempFolderPath, $"{fileNameWithoutExt}.jpg");
        await $"ffmpeg -i {filePath} -ss 00:00:01.000 -vframes 1 {videoThumbnailFilePath}".Bash(_logger);

        // Resize the big picture
        var smallThumbnail = videoThumbnailFilePath.MakePhotoThumbnail();

        // Delete temp thumbnail
        File.Delete(videoThumbnailFilePath);

        return smallThumbnail;
    }

    /// <inheritdoc />
    public async Task<VideoMetadata?> ReadVideoMetadata(string filePath)
    {
        // Make temporary text file with metadata
        var fileNameWithoutExt = Path.GetFileNameWithoutExtension(filePath);
        var videoMetadataFilePath = Path.Combine(_tempFolderPath, $"{fileNameWithoutExt}_metadata.txt");
        await $"ffprobe -v error -select_streams v:0 -show_entries stream=height,width -show_format {filePath} > {videoMetadataFilePath} 2>&1"
            .Bash(_logger);

        if (File.Exists(videoMetadataFilePath))
        {
            var videoMetadata = ReadTextMetadata(videoMetadataFilePath);
            // Delete temporary file
            File.Delete(videoMetadataFilePath);
            return videoMetadata;
        }
        else
        {
            return null;
        }
    }

#region  Metadata File Template generated by ffprobe
    /*
[STREAM]
width=1920
height=1080
[SIDE_DATA]
[/SIDE_DATA]
[/STREAM]
[FORMAT]
filename=IMG_6976.MOV
nb_streams=4
nb_programs=0
format_name=mov,mp4,m4a,3gp,3g2,mj2
format_long_name=QuickTime / MOV
start_time=0.000000
duration=8.273333
size=16154502
bit_rate=15620792
probe_score=100
TAG:major_brand=qt  
TAG:minor_version=0
TAG:compatible_brands=qt  
TAG:creation_time=2020-08-14T07:57:43.000000Z
TAG:com.apple.quicktime.location.ISO6709=+49.4265-006.9716+328.556/
TAG:com.apple.quicktime.make=Apple
TAG:com.apple.quicktime.model=iPhone 6s
TAG:com.apple.quicktime.software=12.1.1
TAG:com.apple.quicktime.creationdate=2020-08-14T09:57:43+0200
[/FORMAT]
    */
#endregion
    private VideoMetadata ReadTextMetadata(string filePath)
    {
        var videoMetadata = new VideoMetadata();
        var allRows = File.ReadLines(filePath).Where(r => r.Contains('='));
        foreach (var row in allRows)
        {
            var paramKeyValue = row.Split('=');
            if (paramKeyValue[0].ToLower().Contains("width"))
            {
                if (int.TryParse(paramKeyValue[1], out int width))
                {
                    videoMetadata.Width = width;
                }
            }
            if (paramKeyValue[0].ToLower().Contains("height"))
            {
                if (int.TryParse(paramKeyValue[1], out int height))
                {
                    videoMetadata.Height = height;
                }
            }
            if (paramKeyValue[0].ToLower().Contains("duration"))
            {
                if (decimal.TryParse(paramKeyValue[1].Replace(".", ","), out decimal duration))
                {
                    videoMetadata.DurationSec = Convert.ToInt32(duration);
                }
            }
            if (paramKeyValue[0].ToLower().Contains("creation_time"))
            {
                if (DateTime.TryParse(paramKeyValue[1], out DateTime creationTime))
                {
                    videoMetadata.CreationTime = creationTime.ToUniversalTime();
                }
            }
            if (paramKeyValue[0].ToLower().Contains("location"))
            {
                var digitPattern = new Regex(@"-?[0-9]\d*(\.\d+)?");
                var matches = digitPattern.Matches(paramKeyValue[1]);
                if(matches.Count >= 2)
                {
                    // First Latitude, second Longitude
                    if (matches[0].Success && decimal.TryParse(matches[0].Value.Replace(".", ","), out decimal latitude))
                    {
                        videoMetadata.Latitude = latitude;
                    }
                    if (matches[1].Success && decimal.TryParse(matches[1].Value.Replace(".", ","), out decimal longitude))
                    {
                        videoMetadata.Longitude = longitude;
                    }
                }
            }
            if (paramKeyValue[0].ToLower().Contains("model"))
            {
                videoMetadata.PictureMaker = paramKeyValue[1];
            }
        }

        return videoMetadata;
    }
}
